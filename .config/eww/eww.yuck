; NOTE: niri scroller
(defwindow niri_scroller
  :monitor '[0, 1]'
  :stacking "fg"
  :geometry (geometry :x 0 :y 0 :width "800px" :height "5px" :acnhor "bottom center")
  :reserve (struts :distance "10px" :side "bottom")
  :exclusive false
  (niri-scroller))

(defwidget niri-scroller []
  (eventbox :onscroll "if [ '{}' == 'down' ]; then niri msg action focus-column-right; else niri msg action focus-column-left; fi"
            :vexpand true
            :valign "fill"
            :style "background-color: #8ec07c; border-radius: 10px;"
  )
)
; -----

; NOTE: workspaces
(deflisten workspaces "./scripts/niri.py --listen-workspaces")
(defwidget workspaces [output]
  (box :orientation "v" :class "workspaces"
    (for wsp in {workspaces[output]}
      (button :class "${wsp.is_focused ? "active" : "inactive"}"
              :onclick "niri msg action focus-workspace ${wsp.id}"
        {wsp.name})
    )))
; -----

; NOTE: bar
(defwindow bar_0
  :monitor 0
  :stacking "fg"
  :geometry (geometry :x 0 :y 0 :width "52px" :height "100%" :anchor "center left")
  :reserve (struts :distance "40px" :side "left")
  :exclusive true
  (bar :output 0))

(defwindow bar_1
  :monitor 1
  :stacking "fg"
  :geometry (geometry :x 0 :y 0 :width "52px" :height "100%" :anchor "center left")
  :reserve (struts :distance "40px" :side "left")
  :exclusive true
  (bar :output 1))



(defwidget bar [output]
  (centerbox :orientation "v"
    (box :class "segment-top"
         :valign "start"
      (top :output output))
    (box :class "middle"
         :valign "center"
      (middle))
    (box :class "segment-bottom"
         :valign "end"
      (bottom))
  )
)

(defwidget metric [icon ?font-size]
  (box :class "metric"
       :orientation "v"
    (label :class "metric-icon"
           :style {font-size != "" ? "font-size: ${font-size}rem;" : ""}
           :text icon)
    (children)
  )
)


(defwidget top [output] (workspaces :output output))


(defwidget middle []
  (box  :orientation "v" 
        :class "metric"
        :space-evenly true
        :spacing "10"
    (date)
    (time)
  )
)
(defwidget date []
  (box :orientation "v"
       :halign "center"
    day month))
(defpoll day      :interval "10m" "date +%d")
(defpoll month    :interval "1h"  "date +%m")
(defwidget time []
  (box :orientation "v"
       :halign "center"
       :style "font-weight: bold"
    hour min))
(defpoll hour :interval "1s" "date +%H")
(defpoll min :interval "1s" "date +%M")



(defwidget bottom []
  (box  :orientation "v"
        :valign "end"
        :space-evenly true
        :spacing "5"

    (systray)

    (volume)

    (metric :icon "" "${round(EWW_CPU.avg, 0)}%")

    (metric :icon "" "${round(EWW_RAM.used_mem_perc, 0)}%")

    (metric :icon ""
            :font-size 0.8
      "${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}%")

    (metric :icon "" "${round(EWW_BATTERY.BAT0.capacity, 0)}%")

    (button :onclick "~/.config/rofi/scripts/powermenu/powermenu"
      "⏻")
  ))
(deflisten volume :initial "0" "./scripts/volume.sh")
(defwidget volume []
  (box :class "volume-metric"
    :orientation "v"
    :space-evenly false
    :vexpand false
    (eventbox :onscroll "if [ '{}' == 'up' ]; then swayosd-client --output-volume 5; else swayosd-client --output-volume -5; fi"
      :vexpand true
      (box :orientation "v"
        :vexpand true
        (button :onclick "pavucontrol &"
                :onrightclick "swayosd-client --output-volume mute-toggle"
                :onmiddleclick "swayosd-client --input-volume mute-toggle"
          volume)))))
; -----
